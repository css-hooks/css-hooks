# prettier-ignore

name: publish

on:
  workflow_dispatch:
    inputs:
      artifacts:
        type: choice
        description: Which items to publish
        options:
          - website_only
          - release
        default: 'website_only'
        required: true

jobs:
  publish:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}
          fetch-depth: 0

      - uses: wagoid/commitlint-github-action@v6

      - name: create nvmrc
        run: sed -n 's/^use-node-version=//p' .npmrc >> .nvmrc

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: 'https://registry.npmjs.org'

      - if: inputs.artifacts == 'release'
        name: verify npm auth
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - uses: pnpm/action-setup@v3
        with:
          version: 9.0.4
          run_install: false

      - name: get pnpm store
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: pnpm cache
        env:
          STORE_PATH: ${{ env.STORE_PATH }}
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - run: pnpm install

      - run: pnpm exec prettier --check .

      # Note that the packages must be built before linting. Otherwise, some
      # types will be inferred as `any` leading to errors.
      - run: pnpm run -r lint

      - uses: browser-actions/setup-chrome@v1
        id: chrome

      - run: pnpm -r test
        env:
          PUPPETEER_EXECUTABLE_PATH: ${{ steps.chrome.outputs.chrome-path }}

      - run: pnpm run -r --filter=./examples/* build

      - run: pnpm run -r --filter=./site build
        env:
          PUPPETEER_EXECUTABLE_PATH: ${{ steps.chrome.outputs.chrome-path }}

      - if: inputs.artifacts == 'release'
        name: version bump
        id: bump
        run: |
          export BUMP_VERSION=$(pnpm exec conventional-recommended-bump -p conventionalcommits | node -e "const v = require('./package.json').version.split('.').map(x => parseInt(x)); const ix = { major: 0, minor: 1, patch: 2 }[require('fs').readFileSync('/dev/stdin', 'utf8').trim()]; v[ix]++; for (let j = ix + 1; j <= 2; j++) v[j] = 0; process.stdout.write(v.join('.'))")
          pnpm -r exec node -e "const pkg = require('./package.json'); require('fs').writeFileSync('./package.json', JSON.stringify(Object.assign({}, pkg, { version: process.env.BUMP_VERSION }, pkg.dependencies ? { dependencies: Object.fromEntries(Object.entries(pkg.dependencies).map(([name, version]) => [name, name.startsWith('@css-hooks/') && /^[0-9]/.test(version) ? process.env.BUMP_VERSION : version])) } : {}), null, 2) + '\n')"
          echo "version=$BUMP_VERSION" >> $GITHUB_OUTPUT
         
      # Note that generating the changelog depends on the package.json version
      # updated in the previous step.
      - if: inputs.artifacts == 'release'
        name: generate changelog
        run:
          npx conventional-changelog -p conventionalcommits -i CHANGELOG.md -s

      - if: inputs.artifacts == 'release'
        name: commit version bump
        uses: EndBug/add-and-commit@v9
        with:
          author_name: GitHub Actions
          author_email: 41898282+github-actions[bot]@users.noreply.github.com
          message: "release: v${{steps.bump.outputs.version}}"
          tag: v${{steps.bump.outputs.version}}
      
      - if: inputs.artifacts == 'release'
        name: github release
        run: pnpm exec conventional-github-releaser -p angular
        env:
          CONVENTIONAL_GITHUB_RELEASER_TOKEN: ${{secrets.GH_ACCESS_TOKEN}}

      - if: inputs.artifacts == 'release'
        name: prepare readme
        run: node -e "require('fs').writeFileSync('./README.md', require('fs').readFileSync('./README.md', 'utf8').replace(/<\!-- npm-remove -->[\S\s]*<\!-- \/npm-remove -->/gm, ''))"

      - if: inputs.artifacts == 'release'
        name: propagate common files
        run: for dir in ./packages/*; do cp README.md "$dir"; done

      - if: inputs.artifacts == 'release'
        name: pnpm publish
        run: pnpm -r --filter=./packages/* --access=public --no-git-checks publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: cloudflare deploy hook
        run: curl -X POST https://api.cloudflare.com/client/v4/pages/webhooks/deploy_hooks/78c66fdd-aa9e-4f70-adb9-eb95c3b1e018
