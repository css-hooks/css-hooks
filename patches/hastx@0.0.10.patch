diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000000000000000000000000000000000000..7c2feb7ef4731d430facfcafcbac59e3ea861849
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+  "editor.formatOnSave": false
+}
diff --git a/esm/css.d.ts b/esm/css.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..9eb99934d51603512a6c6a181b296e01511ce99e
--- /dev/null
+++ b/esm/css.d.ts
@@ -0,0 +1,8 @@
+import * as CSS from "csstype";
+export type CSSProperties = CSS.Properties<string | number>;
+
+declare function cssValueToString(propertyName: string, value: unknown): string;
+
+declare function styleObjectToString(obj: CSSProperties): string;
+
+export { cssValueToString, styleObjectToString }
\ No newline at end of file
diff --git a/esm/css.js b/esm/css.js
new file mode 100644
index 0000000000000000000000000000000000000000..b014562e323a3d382e762d96db23ac06bfd529e3
--- /dev/null
+++ b/esm/css.js
@@ -0,0 +1,107 @@
+export function cssValueToString(propertyName, value) {
+  switch (typeof value) {
+    case "string":
+      return value;
+    case "number":
+      return `${value}${isUnitlessNumber(propertyName) ? "" : "px"}`;
+    default:
+      return null;
+  }
+}
+const space = process.env.NODE_ENV === "production" ? "" : " ";
+
+export function styleObjectToString(obj) {
+  return Object
+    .entries(obj)
+    .map(([property, value]) => [
+        /^--/.test(property) ? property : property.replace(/[A-Z]/g, x => `-${x.toLowerCase()}`),
+        cssValueToString(property, value),
+    ])
+    .reduce((a, [p, v]) => {
+      const b = p + ":" + space + v;
+      return a ? (a + ";" + space + b) : b;
+    }, "");
+}
+
+/**
+ * Following code (c) Meta Platforms, Inc. and affiliates.
+ * Source modified to account for custom properties.
+ */
+
+const _unitlessNumbers = new Set([
+  "animationIterationCount",
+  "aspectRatio",
+  "borderImageOutset",
+  "borderImageSlice",
+  "borderImageWidth",
+  "boxFlex",
+  "boxFlexGroup",
+  "boxOrdinalGroup",
+  "columnCount",
+  "columns",
+  "flex",
+  "flexGrow",
+  "flexPositive",
+  "flexShrink",
+  "flexNegative",
+  "flexOrder",
+  "gridArea",
+  "gridRow",
+  "gridRowEnd",
+  "gridRowSpan",
+  "gridRowStart",
+  "gridColumn",
+  "gridColumnEnd",
+  "gridColumnSpan",
+  "gridColumnStart",
+  "fontWeight",
+  "lineClamp",
+  "lineHeight",
+  "opacity",
+  "order",
+  "orphans",
+  "scale",
+  "tabSize",
+  "widows",
+  "zIndex",
+  "zoom",
+  "fillOpacity", // SVG-related properties
+  "floodOpacity",
+  "stopOpacity",
+  "strokeDasharray",
+  "strokeDashoffset",
+  "strokeMiterlimit",
+  "strokeOpacity",
+  "strokeWidth",
+  "MozAnimationIterationCount", // Known Prefixed Properties
+  "MozBoxFlex", // TODO: Remove these since they shouldn't be used in modern code
+  "MozBoxFlexGroup",
+  "MozLineClamp",
+  "msAnimationIterationCount",
+  "msFlex",
+  "msZoom",
+  "msFlexGrow",
+  "msFlexNegative",
+  "msFlexOrder",
+  "msFlexPositive",
+  "msFlexShrink",
+  "msGridColumn",
+  "msGridColumnSpan",
+  "msGridRow",
+  "msGridRowSpan",
+  "WebkitAnimationIterationCount",
+  "WebkitBoxFlex",
+  "WebKitBoxFlexGroup",
+  "WebkitBoxOrdinalGroup",
+  "WebkitColumnCount",
+  "WebkitColumns",
+  "WebkitFlex",
+  "WebkitFlexGrow",
+  "WebkitFlexPositive",
+  "WebkitFlexShrink",
+  "WebkitLineClamp",
+]);
+
+function isUnitlessNumber(name) {
+  return /^--/.test(name) || _unitlessNumbers.has(name);
+}
\ No newline at end of file
diff --git a/esm/html.d.ts b/esm/html.d.ts
index 328d9950bd8715de3bfe39925b01799642475e45..cd70b90fae5f5ffd46b8f63631dc2854c02ee828 100644
--- a/esm/html.d.ts
+++ b/esm/html.d.ts
@@ -1,4 +1,5 @@
 import type * as hast from "./deps.js";
+import type { CSSProperties } from "./css.js";
 export type HTMLChild = string | number | boolean | hast.Element | hast.Root | hast.Text;
 export type HTMLChildren = HTMLChild | Iterable<HTMLChild>;
 export interface HTMLVoidElement extends HTMLElement {
@@ -28,7 +29,7 @@ export interface HTMLAttributes {
     lang?: string;
     nonce?: string;
     spellcheck?: "true" | "false" | "default";
-    style?: string;
+    style?: CSSProperties;
     tabindex?: number;
     title?: string;
     translate?: "yes" | "no";
diff --git a/esm/jsx-runtime.js b/esm/jsx-runtime.js
index 7b8c0a53c0cc27a447fa164a2ca2f444cf6c4b7c..97d90675cb7f79f7d6e4450838275868b88e9ffe 100644
--- a/esm/jsx-runtime.js
+++ b/esm/jsx-runtime.js
@@ -1,12 +1,17 @@
+import { styleObjectToString } from "./css.js";
+
 export function jsx(type, props, key) {
     if (typeof type === "string") {
         let tagName = type;
         let { children, ...properties } = props;
         let className = properties.class ? { className: properties.class } : null;
+        let style = properties.style
+          ? { style: styleObjectToString(properties.style) }
+          : null;
         return {
             type: "element",
             tagName,
-            properties: { ...properties, ...className },
+            properties: { ...properties, ...className, ...style },
             children: read(children),
         };
     }
diff --git a/esm/svg.d.ts b/esm/svg.d.ts
index da173b67d4f5ec2c7bf243f0468dac06c22a3e0d..2d0f4d88e5a09c82e2f31e1a1a4899039753b6c7 100644
--- a/esm/svg.d.ts
+++ b/esm/svg.d.ts
@@ -1,4 +1,5 @@
 import type * as hast from "./deps.js";
+import type { CSSProperties } from "./css.js";
 export type SVGChild = string | number | boolean | hast.Element | hast.Root | hast.Text;
 export type SVGChildren = SVGChild | Iterable<SVGChild>;
 export interface SVGElement extends SVGAttributes, SVGPresentationAttributes {
@@ -7,7 +8,7 @@ export interface SVGElement extends SVGAttributes, SVGPresentationAttributes {
 export interface SVGAttributes {
     class?: string;
     id?: string;
-    style?: string;
+    style?: CSSProperties;
     tabindex?: number;
 }
 export interface SVGPresentationAttributes extends SVGAttributes {
@@ -39,10 +40,10 @@ export interface SVGPresentationAttributes extends SVGAttributes {
 }
 export interface SVGSVG extends SVGElement {
     xmlns?: "http://www.w3.org/2000/svg";
-    height?: string;
+    height?: string | number;
     preserveAspectRation?: string;
     viewBox?: string;
-    width?: string;
+    width?: string | number;
     x?: string;
     y?: string;
 }
@@ -53,6 +54,17 @@ export interface SVGPath extends SVGElement {
     d: string;
     pathLength?: number;
 }
+export interface SVGCircle extends SVGElement {
+    cx?: string | number;
+    cy?: string | number;
+    r?: string | number;
+}
+export interface SVGEllipse extends SVGElement {
+    cx?: string | number;
+    cy?: string | number;
+    rx?: string | number;
+    ry?: string | number;
+}
 export interface SVGRect extends SVGElement {
     height?: string | number;
     width?: string | number;
@@ -62,6 +74,19 @@ export interface SVGRect extends SVGElement {
     ry?: string | number;
     pathLength?: string | number;
 }
+export interface SVGLinearGradient {
+    id?: string;
+    x1?: string | number;
+    x2?: string | number;
+    y1?: string | number;
+    y2?: string | number;
+    gradientUnits: "userSpaceOnUse";
+    children?: SVGChildren;
+}
+export interface SVGStop {
+    offset?: string | number;
+    "stop-color"?: string | number;
+}
 export interface SVGElements {
     svg: SVGSVG;
     animate: SVGAnimate;
@@ -70,4 +95,8 @@ export interface SVGElements {
     defs: SVGElement;
     clipPath: SVGElement;
     rect: SVGRect;
+    circle: SVGCircle;
+    ellipse: SVGEllipse;
+    linearGradient: SVGLinearGradient;
+    stop: SVGStop;
 }
diff --git a/package.json b/package.json
index 4448f1956eceedde73c6c039bc1b1de2557e449c..c295c2363529fea29552862b2ef78d1b62b76d94 100644
--- a/package.json
+++ b/package.json
@@ -18,6 +18,10 @@
   },
   "sideEffects": false,
   "exports": {
+    "./css": {
+      "import": "./esm/css.js",
+      "types": "./esm/css.d.ts"
+    },
     "./jsx-runtime": {
       "import": "./esm/jsx-runtime.js",
       "require": "./script/jsx-runtime.js"
